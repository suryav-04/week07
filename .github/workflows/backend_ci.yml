name: Backend CI - Test, Build and Push Images to ACR

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

env:
  # Must be set as a repo secret; e.g. "suryav07acr.azurecr.io"
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  # --- 1) TEST & LINT ---
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5432:5432" ]

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5433:5432" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  # --- 2) BUILD & PUSH (only if tests pass) ---
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Derive registry NAME from login server (e.g., "suryav07acr.azurecr.io" -> "suryav07acr")
      - name: Derive ACR name
        id: acr
        run: |
          ACR_NAME="$(echo "${{ env.ACR_LOGIN_SERVER }}" | cut -d. -f1)"
          echo "name=$ACR_NAME" >> "$GITHUB_OUTPUT"

      # This performs docker login to the registry
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ steps.acr.outputs.name }}

      # Sanity: show the folders so we know the build contexts exist
      - name: Show repo layout
        run: |
          pwd
          ls -la
          ls -la backend || true
          ls -la backend/product_service || true
          ls -la backend/order_service || true

      # Build & push PRODUCT (single-line build so the context can't be dropped)
      - name: Build and Push Product Service Image
        env:
          IMG_SHA:    ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ github.sha }}
          IMG_LATEST: ${{ env.ACR_LOGIN_SERVER }}/product_service:latest
        run: |
          docker build -f backend/product_service/Dockerfile -t "$IMG_SHA" -t "$IMG_LATEST" backend/product_service
          docker push "$IMG_SHA"
          docker push "$IMG_LATEST"

      # Build & push ORDER
      - name: Build and Push Order Service Image
        env:
          IMG_SHA:    ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ github.sha }}
          IMG_LATEST: ${{ env.ACR_LOGIN_SERVER }}/order_service:latest
        run: |
          docker build -f backend/order_service/Dockerfile -t "$IMG_SHA" -t "$IMG_LATEST" backend/order_service
          docker push "$IMG_SHA"
          docker push "$IMG_LATEST"

      - name: Logout from Azure
        if: always()
        run: az logout
